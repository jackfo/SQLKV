/* Generated By:JavaCC: Do not edit this line. SQLParserTokenManager.java */
package com.cfs.sqlkv.compile.parse;
import com.cfs.sqlkv.catalog.types.*;
import com.cfs.sqlkv.catalog.types.DataTypeDescriptor;
import com.cfs.sqlkv.column.*;
import com.cfs.sqlkv.common.context.*;
import com.cfs.sqlkv.compile.*;
import com.cfs.sqlkv.compile.table.*;
import com.cfs.sqlkv.compile.node.*;
import com.cfs.sqlkv.compile.result.*;
import com.cfs.sqlkv.compile.name.TableName;
import com.cfs.sqlkv.common.*;
import com.cfs.sqlkv.sql.dictionary.*;
import com.cfs.sqlkv.util.*;
import java.sql.*;
import java.util.*;

public class SQLParserTokenManager implements SQLParserConstants
{
        void CommonTokenAction(Token t)
        {
                t.beginOffset = input_stream.getBeginOffset();
                t.endOffset = input_stream.getEndOffset();
        }
        int commentNestingDepth = 0;
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2000000L);
      case 34:
         jjmatchedKind = 387;
         return jjMoveNfa_0(0, 0);
      case 35:
         jjmatchedKind = 396;
         return jjMoveNfa_0(0, 0);
      case 37:
         jjmatchedKind = 388;
         return jjMoveNfa_0(0, 0);
      case 38:
         jjmatchedKind = 389;
         return jjMoveNfa_0(0, 0);
      case 39:
         jjmatchedKind = 390;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 393;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 394;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 395;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 397;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 398;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 399;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x80000000000L, 0x0L, 0x400000000L);
      case 46:
         jjmatchedKind = 400;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800000000L);
      case 47:
         jjmatchedKind = 401;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 402;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x80000L);
      case 59:
         jjmatchedKind = 404;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 405;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1400000L);
      case 61:
         jjmatchedKind = 407;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 410;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000L);
      case 63:
         jjmatchedKind = 412;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x3ffe0L, 0x0L, 0x0L, 0x780000L, 0x0L, 0xcL, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0xfc0000L, 0x0L, 0x0L, 0x800000L, 0x10100000000000L, 0x10L, 0x0L);
      case 67:
         jjmatchedKind = 216;
         return jjMoveStringLiteralDfa1_0(0x3fffffff000000L, 0x0L, 0x0L, 0xfe000000L, 0x1e00000000000L, 0x3e0L, 0x0L);
      case 68:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0xff80000000000000L, 0x3fL, 0x0L, 0x3f00000000L, 0x2000000000000L, 0xfc00L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffc0L, 0x0L, 0x4000000000L, 0x8000000000000L, 0x70000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ff0000L, 0x0L, 0x8000000000L, 0x0L, 0x80000L, 0x0L);
      case 71:
         jjmatchedKind = 423;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc000000L, 0x0L, 0x10000000000L, 0x4000000000000L, 0x0L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fffc00000000L, 0x0L, 0x7e0000000000L, 0x0L, 0x300000L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L, 0x0L, 0x0L, 0x0L, 0x400000L, 0x0L);
      case 75:
         jjmatchedKind = 421;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf8000000000000L, 0x0L, 0x7f800000000000L, 0x60000000000000L, 0x3800000L, 0x0L);
      case 77:
         jjmatchedKind = 422;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f00000000000000L, 0x0L, 0xff80000000000000L, 0x1L, 0x1c000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000000000L, 0x3fL, 0x0L, 0x8000000000003eL, 0xe0000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffc0L, 0x0L, 0x1000000000000c0L, 0x1f00000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ff0000L, 0x0L, 0x700L, 0x1e000000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fe000000L, 0x0L, 0xe0000000001f800L, 0x7fe0000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fffc00000000L, 0x0L, 0x10000001fffe0000L, 0x3ff8000000000000L, 0x0L);
      case 84:
         jjmatchedKind = 178;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7ff8000000000000L, 0x0L, 0xfe00000000L, 0xc000000000000000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000000000L, 0x3fL, 0x30000000000L, 0x0L, 0x3L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xfc0L, 0x0L, 0x0L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3f000L, 0x40000000000L, 0x0L, 0x4L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xe000000000000000L, 0x3L, 0x0L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x40000L, 0x0L, 0x0L, 0x0L);
      case 91:
         jjmatchedKind = 415;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 416;
         return jjMoveNfa_0(0, 0);
      case 95:
         jjmatchedKind = 413;
         return jjMoveNfa_0(0, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3ffe0L, 0x0L, 0x0L, 0x780000L, 0x0L, 0xcL, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xfc0000L, 0x0L, 0x0L, 0x800000L, 0x10100000000000L, 0x10L, 0x0L);
      case 99:
         jjmatchedKind = 216;
         return jjMoveStringLiteralDfa1_0(0x3fffffff000000L, 0x0L, 0x0L, 0xfe000000L, 0x1e00000000000L, 0x3e0L, 0x0L);
      case 100:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0xff80000000000000L, 0x3fL, 0x0L, 0x3f00000000L, 0x2000000000000L, 0xfc00L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffc0L, 0x0L, 0x4000000000L, 0x8000000000000L, 0x70000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ff0000L, 0x0L, 0x8000000000L, 0x0L, 0x80000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc000000L, 0x0L, 0x10000000000L, 0x4000000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fffc00000000L, 0x0L, 0x7e0000000000L, 0x0L, 0x300000L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L, 0x0L, 0x0L, 0x0L, 0x400000L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf8000000000000L, 0x0L, 0x7f800000000000L, 0x60000000000000L, 0x3800000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f00000000000000L, 0x0L, 0xff80000000000000L, 0x1L, 0x1c000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000000000L, 0x3fL, 0x0L, 0x8000000000003eL, 0xe0000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffc0L, 0x0L, 0x1000000000000c0L, 0x1f00000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ff0000L, 0x0L, 0x700L, 0x1e000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fe000000L, 0x0L, 0xe0000000001f800L, 0x7fe0000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fffc00000000L, 0x0L, 0x10000001fffe0000L, 0x3ff8000000000000L, 0x0L);
      case 116:
         jjmatchedKind = 178;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7ff8000000000000L, 0x0L, 0xfe00000000L, 0xc000000000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000000000L, 0x3fL, 0x30000000000L, 0x0L, 0x3L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xfc0L, 0x0L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3f000L, 0x40000000000L, 0x0L, 0x4L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xe000000000000000L, 0x3L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x40000L, 0x0L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 391;
         return jjMoveNfa_0(0, 0);
      case 124:
         jjmatchedKind = 414;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x200000000L);
      case 125:
         jjmatchedKind = 392;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000000L, active5, 0L, active6, 0L);
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x800000000L);
      case 58:
         if ((active6 & 0x80000L) != 0L)
         {
            jjmatchedKind = 403;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active6 & 0x400000L) != 0L)
         {
            jjmatchedKind = 406;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 409;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 411;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active6 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 408;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 418;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0xf000000L, active1, 0x6308000100010000L, active2, 0x8000000030000L, active3, 0x1818007020007c0L, active4, 0x2200000020102L, active5, 0x6000410000L, active6, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x180000L, active4, 0x40L, active5, 0x400L, active6, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000000L, active2, 0xc00000000L, active3, 0x200000L, active4, 0x40004L, active5, 0x800000L, active6, 0x1L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0x400000000L, active2, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0xff800000000c0000L, active1, 0x34000004020001L, active2, 0x1000f07e000001L, active3, 0x206011800040000L, active4, 0x4000000187800L, active5, 0x71fe006c003810L, active6, 0L);
      case 70:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80L, active5, 0x200000004L, active6, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8L, active6, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0xf0000000L, active1, 0L, active2, 0L, active3, 0x3000L, active4, 0x40200000000L, active5, 0x80000000000000L, active6, 0x4L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000L, active1, 0xc4000000004000eL, active2, 0x60000080000000L, active3, 0x40800000000c800L, active4, 0x10003c00000000L, active5, 0x4000L, active6, 0L);
      case 74:
         if ((active5 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 352;
            jjmatchedPos = 1;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000001c0L, active1, 0x8080040L, active2, 0L, active3, 0x4c00000L, active4, 0x200L, active5, 0xc00000020L, active6, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L, active2, 0x10000000000L, active3, 0L, active4, 0xe000000000000000L, active5, 0x20003L, active6, 0L);
      case 78:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x80000L) != 0L)
         {
            jjmatchedKind = 339;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x600L, active1, 0x7fe000000180L, active2, 0x8000000000000100L, active3, 0x7c4000000003L, active4, 0x10000000000L, active5, 0x300000L, active6, 0L);
      case 79:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3ffe00400000L, active1, 0x1082000220700010L, active2, 0x20300000004L, active3, 0xf870008078010000L, active4, 0x6a0100000018000L, active5, 0x130080c0L, active6, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000000600L, active3, 0xcL, active4, 0L, active5, 0x200000000000000L, active6, 0L);
      case 81:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x780000000000L, active3, 0L, active4, 0x3fe00000L, active5, 0x500000000000000L, active6, 0L);
      case 82:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 369;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x2L) != 0L)
         {
            jjmatchedKind = 385;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000800L, active1, 0xc0800020L, active2, 0x3f00000000fc1000L, active3, 0x20000L, active4, 0x4000000400L, active5, 0xc000008000000000L, active6, 0L);
      case 83:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x100L) != 0L)
         {
            jjmatchedKind = 328;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6000L, active1, 0x1000000000200L, active2, 0L, active3, 0x30L, active4, 0x20000000000L, active5, 0L, active6, 0L);
      case 84:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8400000c0000000L, active5, 0x3808000000000000L, active6, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x3f000000010000L, active1, 0x3000000L, active2, 0x1800001006038L, active3, 0L, active4, 0x1001c00000000039L, active5, 0x11000000200L, active6, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L, active2, 0x8000L, active3, 0L, active4, 0x100000000000000L, active5, 0x80000000L, active6, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xfc00L, active2, 0L, active3, 0L, active4, 0x8000000000000L, active5, 0x40000L, active6, 0L);
      case 89:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0x2080000000L, active4, 0x8100000000L, active5, 0L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xf000000L, active1, 0x6308000100010000L, active2, 0x8000000030000L, active3, 0x1818007020007c0L, active4, 0x2200000020102L, active5, 0x6000410000L, active6, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x180000L, active4, 0x40L, active5, 0x400L, active6, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000000L, active2, 0xc00000000L, active3, 0x200000L, active4, 0x40004L, active5, 0x800000L, active6, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0x400000000L, active2, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xff800000000c0000L, active1, 0x34000004020001L, active2, 0x1000f07e000001L, active3, 0x206011800040000L, active4, 0x4000000187800L, active5, 0x71fe006c003810L, active6, 0L);
      case 102:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80L, active5, 0x200000004L, active6, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8L, active6, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xf0000000L, active1, 0L, active2, 0L, active3, 0x3000L, active4, 0x40200000000L, active5, 0x80000000000000L, active6, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000L, active1, 0xc4000000004000eL, active2, 0x60000080000000L, active3, 0x40800000000c800L, active4, 0x10003c00000000L, active5, 0x4000L, active6, 0L);
      case 106:
         if ((active5 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 352;
            jjmatchedPos = 1;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000001c0L, active1, 0x8080040L, active2, 0L, active3, 0x4c00000L, active4, 0x200L, active5, 0xc00000020L, active6, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L, active2, 0x10000000000L, active3, 0L, active4, 0xe000000000000000L, active5, 0x20003L, active6, 0L);
      case 110:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x80000L) != 0L)
         {
            jjmatchedKind = 339;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x600L, active1, 0x7fe000000180L, active2, 0x8000000000000100L, active3, 0x7c4000000003L, active4, 0x10000000000L, active5, 0x300000L, active6, 0L);
      case 111:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3ffe00400000L, active1, 0x1082000220700010L, active2, 0x20300000004L, active3, 0xf870008078010000L, active4, 0x6a0100000018000L, active5, 0x130080c0L, active6, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000000600L, active3, 0xcL, active4, 0L, active5, 0x200000000000000L, active6, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x780000000000L, active3, 0L, active4, 0x3fe00000L, active5, 0x500000000000000L, active6, 0L);
      case 114:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 369;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x2L) != 0L)
         {
            jjmatchedKind = 385;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000800L, active1, 0xc0800020L, active2, 0x3f00000000fc1000L, active3, 0x20000L, active4, 0x4000000400L, active5, 0xc000008000000000L, active6, 0L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x100L) != 0L)
         {
            jjmatchedKind = 328;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6000L, active1, 0x1000000000200L, active2, 0L, active3, 0x30L, active4, 0x20000000000L, active5, 0L, active6, 0L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8400000c0000000L, active5, 0x3808000000000000L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x3f000000010000L, active1, 0x3000000L, active2, 0x1800001006038L, active3, 0L, active4, 0x1001c00000000039L, active5, 0x11000000200L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L, active2, 0x8000L, active3, 0L, active4, 0x100000000000000L, active5, 0x80000000L, active6, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xfc00L, active2, 0L, active3, 0L, active4, 0x8000000000000L, active5, 0x40000L, active6, 0L);
      case 121:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0x2080000000L, active4, 0x8100000000L, active5, 0L, active6, 0L);
      case 124:
         if ((active6 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 417;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 46:
         if ((active6 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 419;
            jjmatchedPos = 2;
         }
         break;
      case 50:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400L, active6, 0L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000270000000L, active1, 0x10000040000002L, active2, 0xf00050006000000L, active3, 0x40000L, active4, 0x200c0040000L, active5, 0x888020080800020L, active6, 0x1L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8800001000000L, active3, 0x8000000L, active4, 0x1000000000000000L, active5, 0L, active6, 0L);
      case 67:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000000L, active1, 0xe00L, active2, 0x1000000000L, active3, 0x30040080000000L, active4, 0x10000080000L, active5, 0x3058000L, active6, 0L);
      case 68:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 354;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000002000000100L, active2, 0x1000L, active3, 0x3000000000000004L, active4, 0x80000000000L, active5, 0x810100000L, active6, 0L);
      case 69:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400080000000L, active1, 0x400003000L, active2, 0xc8200L, active3, 0x20000003810L, active4, 0x100040200000400L, active5, 0x200000000000000L, active6, 0L);
      case 70:
         if ((active5 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 353;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 362;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x3800000000000000L, active1, 0x20000000000000L, active2, 0x8000000L, active3, 0x4800000000L, active4, 0x80L, active5, 0x80000002010L, active6, 0L);
      case 71:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0L, active2, 0x80000000L, active3, 0x40000000000000L, active4, 0x10000000000000L, active5, 0x8L, active6, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x400000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
         if ((active4 & 0x200L) != 0L)
         {
            jjmatchedKind = 265;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2004000004000L, active2, 0x9000000000700000L, active3, 0x80000020021L, active4, 0L, active5, 0x4000000000000000L, active6, 0x4L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L, active5, 0L, active6, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0x2L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000001c00000080L, active1, 0x1010000L, active2, 0x702110000118L, active3, 0x20000c0L, active4, 0xc20020003fe0881cL, active5, 0x100000000000003L, active6, 0L);
      case 77:
         if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0x800000000L, active2, 0x70020000000020L, active3, 0x8000010000000L, active4, 0x3c00000023L, active5, 0x40L, active6, 0L);
      case 78:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xfc000100000L, active1, 0x800008002000000L, active2, 0L, active3, 0x4402812060004000L, active4, 0xa0000100000000L, active5, 0x100000000080L, active6, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x800100000000L, active1, 0x1000088880020L, active2, 0x800000L, active3, 0x100004800000L, active4, 0x100000000000L, active5, 0x8000000000L, active6, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0x8L, active4, 0x8008000001000L, active5, 0x220000L, active6, 0L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x30000000000000L, active6, 0L);
      case 82:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x3f100000000000L, active1, 0x240000L, active2, 0x800020000L, active3, 0x8201008000010700L, active4, 0x841c00000100000L, active5, 0x1400012000005a00L, active6, 0L);
      case 83:
         if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000f004000L, active1, 0x806000000004dL, active2, 0x2004020000000L, active3, 0x100000L, active4, 0x2100L, active5, 0x604004000000L, active6, 0L);
      case 84:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 356;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x490100L, active1, 0x6100700020028000L, active2, 0x6400L, active3, 0x80201300208000L, active4, 0x6000000004000L, active5, 0x41800008000004L, active6, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0x200400010L, active2, 0x2000000000000000L, active3, 0L, active4, 0x4000000000L, active5, 0x8000000000000000L, active6, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L, active2, 0x40000000L, active3, 0x4400000000000L, active4, 0x20000L, active5, 0x400000L, active6, 0L);
      case 87:
         if ((active4 & 0x10000L) != 0L)
         {
            jjmatchedKind = 272;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 349;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000000L, active2, 0x200000000L, active3, 0x400000L, active4, 0x400000000000000L, active5, 0x40000000L, active6, 0L);
      case 88:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0x100000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000000000000L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000270000000L, active1, 0x10000040000002L, active2, 0xf00050006000000L, active3, 0x40000L, active4, 0x200c0040000L, active5, 0x888020080800020L, active6, 0x1L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8800001000000L, active3, 0x8000000L, active4, 0x1000000000000000L, active5, 0L, active6, 0L);
      case 99:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000000L, active1, 0xe00L, active2, 0x1000000000L, active3, 0x30040080000000L, active4, 0x10000080000L, active5, 0x3058000L, active6, 0L);
      case 100:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 354;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000002000000100L, active2, 0x1000L, active3, 0x3000000000000004L, active4, 0x80000000000L, active5, 0x810100000L, active6, 0L);
      case 101:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400080000000L, active1, 0x400003000L, active2, 0xc8200L, active3, 0x20000003810L, active4, 0x100040200000400L, active5, 0x200000000000000L, active6, 0L);
      case 102:
         if ((active5 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 353;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 362;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x3800000000000000L, active1, 0x20000000000000L, active2, 0x8000000L, active3, 0x4800000000L, active4, 0x80L, active5, 0x80000002010L, active6, 0L);
      case 103:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0L, active2, 0x80000000L, active3, 0x40000000000000L, active4, 0x10000000000000L, active5, 0x8L, active6, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x400000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         if ((active4 & 0x200L) != 0L)
         {
            jjmatchedKind = 265;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2004000004000L, active2, 0x9000000000700000L, active3, 0x80000020021L, active4, 0L, active5, 0x4000000000000000L, active6, 0x4L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L, active5, 0L, active6, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0x2L, active4, 0L, active5, 0L, active6, 0L);
      case 108:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000001c00000080L, active1, 0x1010000L, active2, 0x702110000118L, active3, 0x20000c0L, active4, 0xc20020003fe0881cL, active5, 0x100000000000003L, active6, 0L);
      case 109:
         if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0x800000000L, active2, 0x70020000000020L, active3, 0x8000010000000L, active4, 0x3c00000023L, active5, 0x40L, active6, 0L);
      case 110:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xfc000100000L, active1, 0x800008002000000L, active2, 0L, active3, 0x4402812060004000L, active4, 0xa0000100000000L, active5, 0x100000000080L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800100000000L, active1, 0x1000088880020L, active2, 0x800000L, active3, 0x100004800000L, active4, 0x100000000000L, active5, 0x8000000000L, active6, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0x8L, active4, 0x8008000001000L, active5, 0x220000L, active6, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x30000000000000L, active6, 0L);
      case 114:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x3f100000000000L, active1, 0x240000L, active2, 0x800020000L, active3, 0x8201008000010700L, active4, 0x841c00000100000L, active5, 0x1400012000005a00L, active6, 0L);
      case 115:
         if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000f004000L, active1, 0x806000000004dL, active2, 0x2004020000000L, active3, 0x100000L, active4, 0x2100L, active5, 0x604004000000L, active6, 0L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 356;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x490100L, active1, 0x6100700020028000L, active2, 0x6400L, active3, 0x80201300208000L, active4, 0x6000000004000L, active5, 0x41800008000004L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0x200400010L, active2, 0x2000000000000000L, active3, 0L, active4, 0x4000000000L, active5, 0x8000000000000000L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L, active2, 0x40000000L, active3, 0x4400000000000L, active4, 0x20000L, active5, 0x400000L, active6, 0L);
      case 119:
         if ((active4 & 0x10000L) != 0L)
         {
            jjmatchedKind = 272;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 349;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000000L, active2, 0x200000000L, active3, 0x400000L, active4, 0x400000000000000L, active5, 0x40000000L, active6, 0L);
      case 120:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0x100000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 121:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000000000000L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
         if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x400000L) != 0L)
         {
            jjmatchedKind = 342;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800400000100000L, active1, 0x8000000000080200L, active2, 0x10000000L, active3, 0x2000400004L, active4, 0x2000000000000L, active5, 0x902001000000L, active6, 0L);
      case 66:
         if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000010L, active2, 0L, active3, 0x100L, active4, 0x20L, active5, 0x800000000001800L, active6, 0L);
      case 67:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x83000000L, active1, 0x100000002022005L, active2, 0x140000800000L, active3, 0x80000020000200L, active4, 0x4000000000500L, active5, 0x200000000000000L, active6, 0L);
      case 68:
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3, 0x4000L, active4, 0x400000000000L, active5, 0x20000000000L, active6, 0L);
      case 69:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 257;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 311;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 313;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 348;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x7000000000004100L, active1, 0x80368800208c00L, active2, 0x60202408003020L, active3, 0x4211000000008L, active4, 0x4000083800021840L, active5, 0x280000100004L, active6, 0L);
      case 71:
         if ((active4 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 309;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0x243800000000000L, active4, 0x20000000000L, active5, 0x4000010000000000L, active6, 0L);
      case 72:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x10000L) != 0L)
         {
            jjmatchedKind = 336;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L, active2, 0x80000000L, active3, 0L, active4, 0L, active5, 0x8000000L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000040000L, active1, 0x2000002100000000L, active2, 0x800000000000400L, active3, 0x3008000800200000L, active4, 0x850000000100000L, active5, 0x1100000000000000L, active6, 0L);
      case 75:
         if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 345;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x30000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 301;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x480000e00000000L, active1, 0x1000000000000L, active2, 0x8010101000010L, active3, 0x82000000L, active4, 0x8100000048018L, active5, 0x2000000000240000L, active6, 0L);
      case 77:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L, active2, 0x100000L, active3, 0x10000000L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 298;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20c000000000L, active1, 0x440400000L, active2, 0x700000000000000L, active3, 0x20000001022L, active4, 0x4000000000L, active5, 0x8000000000000000L, active6, 0L);
      case 79:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80L, active1, 0L, active2, 0x8000001840200000L, active3, 0x404008000000L, active4, 0x10100000004L, active5, 0x10L, active6, 0L);
      case 80:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x10000000044000L, active3, 0L, active4, 0x8000000000000001L, active5, 0x8000000040L, active6, 0L);
      case 81:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1L, active4, 0L, active5, 0x1L, active6, 0L);
      case 82:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1f100060000000L, active1, 0L, active2, 0x8000L, active3, 0x40000002000L, active4, 0x800040000000L, active5, 0x80000080002008L, active6, 0L);
      case 83:
         if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 374;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20830100000000L, active1, 0x54000L, active2, 0xc04000080000L, active3, 0L, active4, 0x1000000000000080L, active5, 0x4004800622L, active6, 0x1L);
      case 84:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 378;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x4000000008L, active2, 0x2000020020000L, active3, 0x4000088040020000L, active4, 0x1000080002000L, active5, 0x8000000024080L, active6, 0x4L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0x5800010080000000L, active2, 0L, active3, 0x1000000000c0L, active4, 0x84000L, active5, 0x31400000008000L, active6, 0L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L, active2, 0x400000L, active3, 0x500000000100000L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
         if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400L, active4, 0L, active5, 0L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000003fe00000L, active5, 0x840000000L, active6, 0L);
      case 97:
         if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x400000L) != 0L)
         {
            jjmatchedKind = 342;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800400000100000L, active1, 0x8000000000080200L, active2, 0x10000000L, active3, 0x2000400004L, active4, 0x2000000000000L, active5, 0x902001000000L, active6, 0L);
      case 98:
         if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000010L, active2, 0L, active3, 0x100L, active4, 0x20L, active5, 0x800000000001800L, active6, 0L);
      case 99:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x83000000L, active1, 0x100000002022005L, active2, 0x140000800000L, active3, 0x80000020000200L, active4, 0x4000000000500L, active5, 0x200000000000000L, active6, 0L);
      case 100:
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3, 0x4000L, active4, 0x400000000000L, active5, 0x20000000000L, active6, 0L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 257;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 311;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 313;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 348;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x7000000000004100L, active1, 0x80368800208c00L, active2, 0x60202408003020L, active3, 0x4211000000008L, active4, 0x4000083800021840L, active5, 0x280000100004L, active6, 0L);
      case 103:
         if ((active4 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 309;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0x243800000000000L, active4, 0x20000000000L, active5, 0x4000010000000000L, active6, 0L);
      case 104:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x10000L) != 0L)
         {
            jjmatchedKind = 336;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L, active2, 0x80000000L, active3, 0L, active4, 0L, active5, 0x8000000L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000040000L, active1, 0x2000002100000000L, active2, 0x800000000000400L, active3, 0x3008000800200000L, active4, 0x850000000100000L, active5, 0x1100000000000000L, active6, 0L);
      case 107:
         if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 345;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x30000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 108:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 301;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x480000e00000000L, active1, 0x1000000000000L, active2, 0x8010101000010L, active3, 0x82000000L, active4, 0x8100000048018L, active5, 0x2000000000240000L, active6, 0L);
      case 109:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L, active2, 0x100000L, active3, 0x10000000L, active4, 0L, active5, 0L, active6, 0L);
      case 110:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 298;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20c000000000L, active1, 0x440400000L, active2, 0x700000000000000L, active3, 0x20000001022L, active4, 0x4000000000L, active5, 0x8000000000000000L, active6, 0L);
      case 111:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80L, active1, 0L, active2, 0x8000001840200000L, active3, 0x404008000000L, active4, 0x10100000004L, active5, 0x10L, active6, 0L);
      case 112:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x10000000044000L, active3, 0L, active4, 0x8000000000000001L, active5, 0x8000000040L, active6, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1L, active4, 0L, active5, 0x1L, active6, 0L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1f100060000000L, active1, 0L, active2, 0x8000L, active3, 0x40000002000L, active4, 0x800040000000L, active5, 0x80000080002008L, active6, 0L);
      case 115:
         if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 374;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20830100000000L, active1, 0x54000L, active2, 0xc04000080000L, active3, 0L, active4, 0x1000000000000080L, active5, 0x4004800622L, active6, 0x1L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 378;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x4000000008L, active2, 0x2000020020000L, active3, 0x4000088040020000L, active4, 0x1000080002000L, active5, 0x8000000024080L, active6, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0x5800010080000000L, active2, 0L, active3, 0x1000000000c0L, active4, 0x84000L, active5, 0x31400000008000L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L, active2, 0x400000L, active3, 0x500000000100000L, active4, 0L, active5, 0L, active6, 0L);
      case 119:
         if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 121:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000c63000000L, active1, 0x1000008000000L, active2, 0x140000L, active3, 0x500000060100000L, active4, 0x8008400000103908L, active5, 0x4202000L, active6, 0L);
      case 66:
         if ((active4 & 0x4L) != 0L)
         {
            jjmatchedKind = 258;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0x2000000000000L, active5, 0L, active6, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0x2000000000L, active2, 0x2000000000L, active3, 0L, active4, 0x4000000040L, active5, 0x8000000080000000L, active6, 0L);
      case 68:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 376;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 249;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x40000L) != 0L)
         {
            jjmatchedKind = 274;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 297;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x800000L) != 0L)
         {
            jjmatchedKind = 343;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 360;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 375;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 381;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x1L) != 0L)
         {
            jjmatchedKind = 384;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1f18c200080000L, active1, 0x100L, active2, 0x2000000880000L, active3, 0x40040002001080L, active4, 0x9000800000a0L, active5, 0x3000800000008aL, active6, 0x4L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x3000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
         if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000000000000L, active6, 0L);
      case 72:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 254;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000000200L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x42000000000L, active1, 0x10004000200008L, active2, 0x4001420010L, active3, 0x80010000500L, active4, 0x1000000000400L, active5, 0xa08804000000000L, active6, 0L);
      case 75:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0x400000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
         if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 242;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x1000000000000010L, active2, 0x800010800008000L, active3, 0L, active4, 0L, active5, 0x400000000000L, active6, 0L);
      case 77:
         if ((active4 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 315;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200001000000000L, active1, 0L, active2, 0x400000000L, active3, 0x2000000000L, active4, 0x10000000000L, active5, 0x102000008000L, active6, 0L);
      case 78:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20100000002L, active2, 0x1000000000L, active3, 0x800000000L, active4, 0x410000100000000L, active5, 0L, active6, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000010000L, active1, 0x2000000000000004L, active2, 0x10100000000400L, active3, 0x204002L, active4, 0L, active5, 0x8000200L, active6, 0L);
      case 80:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 380;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xe00L, active2, 0L, active3, 0L, active4, 0x20000L, active5, 0L, active6, 0L);
      case 81:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400L, active6, 0L);
      case 82:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x4L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000104000L, active1, 0x4000240000008001L, active2, 0x200028000020L, active3, 0x21d000000000L, active4, 0x80000084000L, active5, 0x1080000000050L, active6, 0L);
      case 83:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x1L) != 0L)
         {
            jjmatchedKind = 256;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x10L) != 0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x20L) != 0L)
         {
            jjmatchedKind = 325;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 361;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x700000000000000L, active3, 0x20000000000000L, active4, 0x3800000000L, active5, 0L, active6, 0L);
      case 84:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 365;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4000430000000000L, active1, 0x800000402004000L, active2, 0xc00010000000L, active3, 0x2020000000004L, active4, 0x100000003fe00000L, active5, 0x841000000L, active6, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x2000L, active2, 0x4000L, active3, 0x800000000001L, active4, 0x4000000008000L, active5, 0x40001L, active6, 0L);
      case 88:
         if ((active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 340;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0L);
      case 89:
         if ((active5 & 0x800L) != 0L)
         {
            jjmatchedKind = 331;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x4000L) != 0L)
         {
            jjmatchedKind = 334;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x20000L) != 0L)
         {
            jjmatchedKind = 337;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 90:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x60000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000c63000000L, active1, 0x1000008000000L, active2, 0x140000L, active3, 0x500000060100000L, active4, 0x8008400000103908L, active5, 0x4202000L, active6, 0L);
      case 98:
         if ((active4 & 0x4L) != 0L)
         {
            jjmatchedKind = 258;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0x2000000000000L, active5, 0L, active6, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0x2000000000L, active2, 0x2000000000L, active3, 0L, active4, 0x4000000040L, active5, 0x8000000080000000L, active6, 0L);
      case 100:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 376;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 249;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x40000L) != 0L)
         {
            jjmatchedKind = 274;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 297;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x800000L) != 0L)
         {
            jjmatchedKind = 343;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 360;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 375;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 381;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x1L) != 0L)
         {
            jjmatchedKind = 384;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1f18c200080000L, active1, 0x100L, active2, 0x2000000880000L, active3, 0x40040002001080L, active4, 0x9000800000a0L, active5, 0x3000800000008aL, active6, 0x4L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x3000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 103:
         if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000000000000L, active6, 0L);
      case 104:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 254;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000000200L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x42000000000L, active1, 0x10004000200008L, active2, 0x4001420010L, active3, 0x80010000500L, active4, 0x1000000000400L, active5, 0xa08804000000000L, active6, 0L);
      case 107:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0x400000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 108:
         if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 242;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x1000000000000010L, active2, 0x800010800008000L, active3, 0L, active4, 0L, active5, 0x400000000000L, active6, 0L);
      case 109:
         if ((active4 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 315;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200001000000000L, active1, 0L, active2, 0x400000000L, active3, 0x2000000000L, active4, 0x10000000000L, active5, 0x102000008000L, active6, 0L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20100000002L, active2, 0x1000000000L, active3, 0x800000000L, active4, 0x410000100000000L, active5, 0L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000010000L, active1, 0x2000000000000004L, active2, 0x10100000000400L, active3, 0x204002L, active4, 0L, active5, 0x8000200L, active6, 0L);
      case 112:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 380;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xe00L, active2, 0L, active3, 0L, active4, 0x20000L, active5, 0L, active6, 0L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400L, active6, 0L);
      case 114:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x4L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000104000L, active1, 0x4000240000008001L, active2, 0x200028000020L, active3, 0x21d000000000L, active4, 0x80000084000L, active5, 0x1080000000050L, active6, 0L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x1L) != 0L)
         {
            jjmatchedKind = 256;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x10L) != 0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x20L) != 0L)
         {
            jjmatchedKind = 325;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 361;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x700000000000000L, active3, 0x20000000000000L, active4, 0x3800000000L, active5, 0L, active6, 0L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 365;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4000430000000000L, active1, 0x800000402004000L, active2, 0xc00010000000L, active3, 0x2020000000004L, active4, 0x100000003fe00000L, active5, 0x841000000L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x2000L, active2, 0x4000L, active3, 0x800000000001L, active4, 0x4000000008000L, active5, 0x40001L, active6, 0L);
      case 120:
         if ((active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 340;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0L);
      case 121:
         if ((active5 & 0x800L) != 0L)
         {
            jjmatchedKind = 331;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x4000L) != 0L)
         {
            jjmatchedKind = 334;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x20000L) != 0L)
         {
            jjmatchedKind = 337;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x60000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 65:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000080L, active1, 0x4000006000000000L, active2, 0x100400100028000L, active3, 0x898000000200L, active4, 0x2104000000000L, active5, 0x8000000840000000L, active6, 0L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000008L, active5, 0L, active6, 0L);
      case 67:
         if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0xc060000000L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L, active5, 0x200000L, active6, 0L);
      case 68:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 347;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000L, active1, 0L, active2, 0x100000800000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x10L) != 0L)
         {
            jjmatchedKind = 324;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 344;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 364;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0x100000000000L, active2, 0x8000000L, active3, 0x80400800000000L, active4, 0L, active5, 0x4000082000008041L, active6, 0L);
      case 70:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000000000L, active6, 0L);
      case 71:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4002008L, active6, 0L);
      case 72:
         if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000000L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc02000001L, active2, 0x800010030000020L, active3, 0x1020022040000000L, active4, 0x4008000000080000L, active5, 0L, active6, 0L);
      case 76:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x100L) != 0L)
         {
            jjmatchedKind = 264;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x400L) != 0L)
         {
            jjmatchedKind = 330;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L, active2, 0x600000000400000L, active3, 0x500000000000000L, active4, 0x100000L, active5, 0x800000000000000L, active6, 0L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0x41000000000L, active4, 0x1010080000000L, active5, 0L, active6, 0L);
      case 78:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 367;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1f040000000000L, active1, 0x201000000000800cL, active2, 0L, active3, 0x500L, active4, 0x800000004000L, active5, 0x31004000000080L, active6, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x2L, active2, 0x60004000000000L, active3, 0L, active4, 0x20000L, active5, 0L, active6, 0L);
      case 80:
         if ((active4 & 0x8000L) != 0L)
         {
            jjmatchedKind = 271;
            jjmatchedPos = 5;
         }
         break;
      case 82:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x34000b0000010000L, active1, 0L, active2, 0x10a000001c0000L, active3, 0L, active4, 0x8004000000002000L, active5, 0x8000000202L, active6, 0L);
      case 83:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100200000000L, active1, 0x220000000000L, active2, 0L, active3, 0L, active4, 0x3fe00c00L, active5, 0x8000000040000L, active6, 0x4L);
      case 84:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x40L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x80L) != 0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 308;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 366;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0xc00004000L, active1, 0x1000000002800L, active2, 0L, active3, 0x10000000L, active4, 0x403800001000L, active5, 0L, active6, 0L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000000L, active5, 0L, active6, 0L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000001000L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
         if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000L, active5, 0L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 97:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000080L, active1, 0x4000006000000000L, active2, 0x100400100028000L, active3, 0x898000000200L, active4, 0x2104000000000L, active5, 0x8000000840000000L, active6, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000008L, active5, 0L, active6, 0L);
      case 99:
         if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0xc060000000L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L, active5, 0x200000L, active6, 0L);
      case 100:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 347;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000L, active1, 0L, active2, 0x100000800000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x10L) != 0L)
         {
            jjmatchedKind = 324;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 344;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 364;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0x100000000000L, active2, 0x8000000L, active3, 0x80400800000000L, active4, 0L, active5, 0x4000082000008041L, active6, 0L);
      case 102:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000000000L, active6, 0L);
      case 103:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4002008L, active6, 0L);
      case 104:
         if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000000L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc02000001L, active2, 0x800010030000020L, active3, 0x1020022040000000L, active4, 0x4008000000080000L, active5, 0L, active6, 0L);
      case 108:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x100L) != 0L)
         {
            jjmatchedKind = 264;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x400L) != 0L)
         {
            jjmatchedKind = 330;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L, active2, 0x600000000400000L, active3, 0x500000000000000L, active4, 0x100000L, active5, 0x800000000000000L, active6, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0x41000000000L, active4, 0x1010080000000L, active5, 0L, active6, 0L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 367;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1f040000000000L, active1, 0x201000000000800cL, active2, 0L, active3, 0x500L, active4, 0x800000004000L, active5, 0x31004000000080L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x2L, active2, 0x60004000000000L, active3, 0L, active4, 0x20000L, active5, 0L, active6, 0L);
      case 112:
         if ((active4 & 0x8000L) != 0L)
         {
            jjmatchedKind = 271;
            jjmatchedPos = 5;
         }
         break;
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x34000b0000010000L, active1, 0L, active2, 0x10a000001c0000L, active3, 0L, active4, 0x8004000000002000L, active5, 0x8000000202L, active6, 0L);
      case 115:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100200000000L, active1, 0x220000000000L, active2, 0L, active3, 0L, active4, 0x3fe00c00L, active5, 0x8000000040000L, active6, 0x4L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x40L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x80L) != 0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 308;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 366;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0xc00004000L, active1, 0x1000000002800L, active2, 0L, active3, 0x10000000L, active4, 0x403800001000L, active5, 0L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000000L, active5, 0L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000001000L, active4, 0L, active5, 0L, active6, 0L);
      case 119:
         if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2L, active4, 0L, active5, 0L, active6, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 121:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000030000000000L, active1, 0x2000000800008000L, active2, 0x610000000000000L, active3, 0x200000000100L, active4, 0x3800001000L, active5, 0x80000008L, active6, 0L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L, active5, 0x840000000L, active6, 0L);
      case 67:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80000200000000L, active1, 0x8L, active2, 0x100000120000000L, active3, 0L, active4, 0L, active5, 0x10000000000000L, active6, 0L);
      case 68:
         if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 6;
         }
         break;
      case 69:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x800L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 302;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 304;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x200000L) != 0L)
         {
            jjmatchedKind = 341;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000002000000L, active1, 0x200000000100L, active2, 0x400000L, active3, 0x1000044000001000L, active4, 0x80000000L, active5, 0x4000000L, active6, 0L);
      case 71:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 358;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x800014000L, active1, 0x1020000000800L, active2, 0x800000000000L, active3, 0x1000000000L, active4, 0x1003ff20400L, active5, 0xa01000000040002L, active6, 0L);
      case 74:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 76:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0x8L, active5, 0L, active6, 0L);
      case 77:
         if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000000L, active5, 0x2000L, active6, 0L);
      case 78:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 307;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L, active2, 0x860014008000000L, active3, 0x40000000L, active4, 0L, active5, 0x80000008000L, active6, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L, active2, 0x200000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L, active2, 0x8000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x4L);
      case 82:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 382;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0x1L, active6, 0L);
      case 83:
         if ((active4 & 0x4000L) != 0L)
         {
            jjmatchedKind = 270;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x200L) != 0L)
         {
            jjmatchedKind = 329;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0xc002000000000000L, active5, 0x40L, active6, 0L);
      case 84:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x2000L) != 0L)
         {
            jjmatchedKind = 269;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x80L) != 0L)
         {
            jjmatchedKind = 327;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1e008060000080L, active1, 0x2400000000L, active2, 0x400000000000L, active3, 0x30010000000L, active4, 0x804000080000L, active5, 0x802800a000000000L, active6, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L, active2, 0x800000L, active3, 0x500000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10080000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000000L, active5, 0L, active6, 0L);
      case 90:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000030000000000L, active1, 0x2000000800008000L, active2, 0x610000000000000L, active3, 0x200000000100L, active4, 0x3800001000L, active5, 0x80000008L, active6, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L, active5, 0x840000000L, active6, 0L);
      case 99:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80000200000000L, active1, 0x8L, active2, 0x100000120000000L, active3, 0L, active4, 0L, active5, 0x10000000000000L, active6, 0L);
      case 100:
         if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 6;
         }
         break;
      case 101:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x800L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 302;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 304;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x200000L) != 0L)
         {
            jjmatchedKind = 341;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000002000000L, active1, 0x200000000100L, active2, 0x400000L, active3, 0x1000044000001000L, active4, 0x80000000L, active5, 0x4000000L, active6, 0L);
      case 103:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 358;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800014000L, active1, 0x1020000000800L, active2, 0x800000000000L, active3, 0x1000000000L, active4, 0x1003ff20400L, active5, 0xa01000000040002L, active6, 0L);
      case 106:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 108:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0x8L, active5, 0L, active6, 0L);
      case 109:
         if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000000L, active5, 0x2000L, active6, 0L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 307;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L, active2, 0x860014008000000L, active3, 0x40000000L, active4, 0L, active5, 0x80000008000L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L, active2, 0x200000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L, active2, 0x8000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x4L);
      case 114:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 382;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0x1L, active6, 0L);
      case 115:
         if ((active4 & 0x4000L) != 0L)
         {
            jjmatchedKind = 270;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x200L) != 0L)
         {
            jjmatchedKind = 329;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0xc002000000000000L, active5, 0x40L, active6, 0L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x2000L) != 0L)
         {
            jjmatchedKind = 269;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x80L) != 0L)
         {
            jjmatchedKind = 327;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1e008060000080L, active1, 0x2400000000L, active2, 0x400000000000L, active3, 0x30010000000L, active4, 0x804000080000L, active5, 0x802800a000000000L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L, active2, 0x800000L, active3, 0x500000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10080000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 121:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000000L, active5, 0L, active6, 0L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000000L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2L, active6, 0x4L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000001000L, active5, 0L, active6, 0L);
      case 67:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 377;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000L, active2, 0x8000000L, active3, 0L, active4, 0L, active5, 0x80000000000L, active6, 0L);
      case 68:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 69:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 294;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 305;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 372;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000L, active1, 0x4L, active2, 0x60000000000000L, active3, 0x10010000000L, active4, 0x4000000000000L, active5, 0x8000002000002000L, active6, 0L);
      case 71:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x38000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x28008000000000L, active6, 0L);
      case 75:
         if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 7;
         }
         break;
      case 76:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x840000000L, active6, 0L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3800000000L, active5, 0L, active6, 0L);
      case 78:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x800000000000L, active3, 0x41000000000L, active4, 0x80020000L, active5, 0x1000000000000L, active6, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x100800004000L, active1, 0x1002000000800L, active2, 0L, active3, 0L, active4, 0x400L, active5, 0L, active6, 0L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000000L, active5, 0L, active6, 0L);
      case 82:
         if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 351;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10000000800000L, active3, 0x100L, active4, 0L, active5, 0L, active6, 0L);
      case 83:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x40L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 7;
         }
         break;
      case 84:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x8000L) != 0L)
         {
            jjmatchedKind = 335;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20800000002L, active2, 0x700000000000000L, active3, 0L, active4, 0x4000010000000000L, active5, 0x800000000000008L, active6, 0L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x40000L, active6, 0L);
      case 89:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x1L) != 0L)
         {
            jjmatchedKind = 320;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 90:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x1e000000000000L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0x80003fe00000L, active5, 0x4000000L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2L, active6, 0x4L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000001000L, active5, 0L, active6, 0L);
      case 99:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 377;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000L, active2, 0x8000000L, active3, 0L, active4, 0L, active5, 0x80000000000L, active6, 0L);
      case 100:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 101:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 294;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 305;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 372;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000L, active1, 0x4L, active2, 0x60000000000000L, active3, 0x10010000000L, active4, 0x4000000000000L, active5, 0x8000002000002000L, active6, 0L);
      case 103:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x38000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x28008000000000L, active6, 0L);
      case 107:
         if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 7;
         }
         break;
      case 108:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x840000000L, active6, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3800000000L, active5, 0L, active6, 0L);
      case 110:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x800000000000L, active3, 0x41000000000L, active4, 0x80020000L, active5, 0x1000000000000L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x100800004000L, active1, 0x1002000000800L, active2, 0L, active3, 0L, active4, 0x400L, active5, 0L, active6, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000000L, active5, 0L, active6, 0L);
      case 114:
         if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 351;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10000000800000L, active3, 0x100L, active4, 0L, active5, 0L, active6, 0L);
      case 115:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x40L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x8000L) != 0L)
         {
            jjmatchedKind = 335;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20800000002L, active2, 0x700000000000000L, active3, 0L, active4, 0x4000010000000000L, active5, 0x800000000000008L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x40000L, active6, 0L);
      case 121:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x1L) != 0L)
         {
            jjmatchedKind = 320;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0x20000000000000L, active6, 0L);
      case 66:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000000000000L, active6, 0x4L);
      case 68:
         if ((active3 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L, active5, 0L, active6, 0L);
      case 69:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x8L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x40000L) != 0L)
         {
            jjmatchedKind = 338;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 350;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 355;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8400000L, active3, 0L, active4, 0x400000000000000L, active5, 0x8000000000L, active6, 0L);
      case 70:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0L, active6, 0L);
      case 71:
         if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 368;
            jjmatchedPos = 8;
         }
         break;
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L, active5, 0L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000002L, active2, 0x500000000000000L, active3, 0x1000000000L, active4, 0L, active5, 0x80000000000L, active6, 0L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000001000L, active5, 0x4000002L, active6, 0L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8800000L, active5, 0L, active6, 0L);
      case 78:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x130000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0x2000L, active6, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
         if ((active4 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 291;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3000000000L, active5, 0L, active6, 0L);
      case 81:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0L, active6, 0L);
      case 82:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 357;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000000L, active5, 0L, active6, 0L);
      case 83:
         if ((active4 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L, active4, 0x400000L, active5, 0L, active6, 0L);
      case 84:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x20000L) != 0L)
         {
            jjmatchedKind = 273;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x8c000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000000L, active5, 0L, active6, 0L);
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000L, active5, 0L, active6, 0L);
      case 89:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 379;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000L, active5, 0L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x60000000000000L, active3, 0x20000000000L, active4, 0L, active5, 0x8000000000000000L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0x20000000000000L, active6, 0L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000000000000L, active6, 0x4L);
      case 100:
         if ((active3 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L, active5, 0L, active6, 0L);
      case 101:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x8L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x40000L) != 0L)
         {
            jjmatchedKind = 338;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 350;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 355;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8400000L, active3, 0L, active4, 0x400000000000000L, active5, 0x8000000000L, active6, 0L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0L, active6, 0L);
      case 103:
         if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 368;
            jjmatchedPos = 8;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L, active5, 0L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000002L, active2, 0x500000000000000L, active3, 0x1000000000L, active4, 0L, active5, 0x80000000000L, active6, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000001000L, active5, 0x4000002L, active6, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8800000L, active5, 0L, active6, 0L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x130000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0x2000L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 112:
         if ((active4 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 291;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3000000000L, active5, 0L, active6, 0L);
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0L, active6, 0L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 357;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000000L, active5, 0L, active6, 0L);
      case 115:
         if ((active4 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L, active4, 0x400000L, active5, 0L, active6, 0L);
      case 116:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x20000L) != 0L)
         {
            jjmatchedKind = 273;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x8c000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000000L, active5, 0L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000L, active5, 0L, active6, 0L);
      case 121:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 379;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x81002000000L, active5, 0L, active6, 0L);
      case 66:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0L, active6, 0L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 68:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000L, active5, 0L, active6, 0L);
      case 69:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 9;
         }
         else if ((active4 & 0x1000L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 9;
         }
         else if ((active6 & 0x4L) != 0L)
         {
            jjmatchedKind = 386;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L, active4, 0x10024400000L, active5, 0x8000000000000000L, active6, 0L);
      case 72:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0xc000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000L, active5, 0x2L, active6, 0L);
      case 76:
         if ((active5 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 373;
            jjmatchedPos = 9;
         }
         break;
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000000000L, active6, 0L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x500000000000000L, active3, 0L, active4, 0x800009000000L, active5, 0x4000000L, active6, 0L);
      case 82:
         if ((active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 314;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0L, active6, 0L);
      case 83:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 9;
         }
         else if ((active5 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 359;
            jjmatchedPos = 9;
         }
         else if ((active5 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 371;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0L, active2, 0x4000000000L, active3, 0x1000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 84:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 9;
         }
         else if ((active5 & 0x2000L) != 0L)
         {
            jjmatchedKind = 333;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x20000010000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0L, active6, 0L);
      case 85:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0L, active6, 0L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x81002000000L, active5, 0L, active6, 0L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0L, active6, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000L, active5, 0L, active6, 0L);
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 9;
         }
         else if ((active4 & 0x1000L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 9;
         }
         else if ((active6 & 0x4L) != 0L)
         {
            jjmatchedKind = 386;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L, active4, 0x10024400000L, active5, 0x8000000000000000L, active6, 0L);
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0xc000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000L, active5, 0x2L, active6, 0L);
      case 108:
         if ((active5 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 373;
            jjmatchedPos = 9;
         }
         break;
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000000000L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x500000000000000L, active3, 0L, active4, 0x800009000000L, active5, 0x4000000L, active6, 0L);
      case 114:
         if ((active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 314;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0L, active6, 0L);
      case 115:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 9;
         }
         else if ((active5 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 359;
            jjmatchedPos = 9;
         }
         else if ((active5 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 371;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0L, active2, 0x4000000000L, active3, 0x1000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 9;
         }
         else if ((active5 & 0x2000L) != 0L)
         {
            jjmatchedKind = 333;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x20000010000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L, active4, 0x30200000L, active5, 0L);
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000400000L, active5, 0x4000000L);
      case 68:
         if ((active4 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 296;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000000L, active5, 0L);
      case 69:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0x4000000L, active5, 0L);
      case 71:
         if ((active5 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 363;
            jjmatchedPos = 10;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000010000L, active1, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0x2000000000L, active5, 0L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000100000L, active5, 0L);
      case 77:
         return jjMoveStringLiteralDfa11_0(active0, 0xc000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 78:
         if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 10;
         }
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 10;
         }
         else if ((active4 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 299;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8800000L, active5, 0x8000000000000000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
         if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 10;
         }
         break;
      case 83:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 10;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0x1000000000L, active4, 0L, active5, 0L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L, active5, 0L);
      case 89:
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 281;
            jjmatchedPos = 10;
         }
         break;
      case 90:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L, active4, 0x30200000L, active5, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000400000L, active5, 0x4000000L);
      case 100:
         if ((active4 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 296;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000000L, active5, 0L);
      case 101:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0x4000000L, active5, 0L);
      case 103:
         if ((active5 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 363;
            jjmatchedPos = 10;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000010000L, active1, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0x2000000000L, active5, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000100000L, active5, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0xc000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 110:
         if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 10;
         }
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 10;
         }
         else if ((active4 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 299;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8800000L, active5, 0x8000000000000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 114:
         if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 10;
         }
         break;
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 10;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0x1000000000L, active4, 0L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L, active5, 0L);
      case 121:
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 281;
            jjmatchedPos = 10;
         }
         break;
      case 122:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000L);
      case 67:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0L);
      case 68:
         if ((active4 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 292;
            jjmatchedPos = 11;
         }
         else if ((active5 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 383;
            jjmatchedPos = 11;
         }
         break;
      case 69:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 276;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 303;
            jjmatchedPos = 11;
         }
         else if ((active5 & 0x2L) != 0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x8000040000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 70:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x2000000000L, active5, 0L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0x1000000000L, active4, 0L, active5, 0L);
      case 75:
         if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 282;
            jjmatchedPos = 11;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L, active2, 0x40000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L, active2, 0L, active3, 0L, active4, 0x4000000400000L, active5, 0L);
      case 82:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 280;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 285;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0x1000L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x8000000L, active5, 0L);
      case 85:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0x800000L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0L);
      case 100:
         if ((active4 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 292;
            jjmatchedPos = 11;
         }
         else if ((active5 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 383;
            jjmatchedPos = 11;
         }
         break;
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 276;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 303;
            jjmatchedPos = 11;
         }
         else if ((active5 & 0x2L) != 0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x8000040000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x2000000000L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0x1000000000L, active4, 0L, active5, 0L);
      case 107:
         if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 282;
            jjmatchedPos = 11;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L, active2, 0x40000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L, active2, 0L, active3, 0L, active4, 0x4000000400000L, active5, 0L);
      case 114:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 280;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 285;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x8000000L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0x800000L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 67:
         if ((active3 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 12;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L);
      case 70:
         if ((active4 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 12;
         }
         break;
      case 71:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 12;
         }
         break;
      case 72:
         if ((active4 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 283;
            jjmatchedPos = 12;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000L);
      case 78:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L, active2, 0L, active3, 0L, active4, 0x4000000400000L, active5, 0L);
      case 82:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 12;
         }
         break;
      case 83:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x10800000L, active5, 0L);
      case 85:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0L, active3, 0x20000000000L, active4, 0x200000L, active5, 0L);
      case 99:
         if ((active3 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 12;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L);
      case 102:
         if ((active4 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 12;
         }
         break;
      case 103:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 12;
         }
         break;
      case 104:
         if ((active4 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 283;
            jjmatchedPos = 12;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L, active2, 0L, active3, 0L, active4, 0x4000000400000L, active5, 0L);
      case 114:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 12;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x10800000L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 68:
         if ((active4 & 0x400000L) != 0L)
         {
            jjmatchedKind = 278;
            jjmatchedPos = 13;
         }
         break;
      case 69:
         if ((active4 & 0x800000L) != 0L)
         {
            jjmatchedKind = 279;
            jjmatchedPos = 13;
         }
         else if ((active5 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 346;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0L);
      case 71:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0L);
      case 83:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0x1000L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000L, active2, 0x40000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 100:
         if ((active4 & 0x400000L) != 0L)
         {
            jjmatchedKind = 278;
            jjmatchedPos = 13;
         }
         break;
      case 101:
         if ((active4 & 0x800000L) != 0L)
         {
            jjmatchedKind = 279;
            jjmatchedPos = 13;
         }
         else if ((active5 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 346;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0L);
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000L, active2, 0x40000000000000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
         if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x4000000200000L, active5, 0L);
      case 79:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L);
      case 82:
         if ((active4 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 14;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 85:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 101:
         if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x4000000200000L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L);
      case 114:
         if ((active4 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 14;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active3, 0x20000000000L, active4, 0x4000000200000L, active5, 0L);
      case 72:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 15;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active3, 0L, active4, 0L, active5, 0x1000L);
      case 77:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active3, 0x20000000000L, active4, 0x4000000200000L, active5, 0L);
      case 104:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 15;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active3, 0L, active4, 0L, active5, 0x1000L);
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 15);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active3, 0L, active4, 0x200000L, active5, 0L);
      case 80:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 16;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active3, 0L, active4, 0x200000L, active5, 0L);
      case 112:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 16;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0x1000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 16);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 16);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa18_0(active3, 0L, active4, 0x4000000000000L, active5, 0L);
      case 76:
         if ((active3 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 17;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa18_0(active3, 0L, active4, 0x200000L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa18_0(active3, 0L, active4, 0L, active5, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active3, 0L, active4, 0x4000000000000L, active5, 0L);
      case 108:
         if ((active3 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 17;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa18_0(active3, 0L, active4, 0x200000L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 17);
}
private final int jjMoveStringLiteralDfa18_0(long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 17);
   }
   switch(curChar)
   {
      case 68:
         if ((active4 & 0x200000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 18;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa19_0(active4, 0x4000000000000L, active5, 0L);
      case 83:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active5, 0x1000L);
      case 100:
         if ((active4 & 0x200000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 18;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa19_0(active4, 0x4000000000000L, active5, 0L);
      case 115:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active5, 0x1000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 18);
}
private final int jjMoveStringLiteralDfa19_0(long old4, long active4, long old5, long active5)
{
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 18);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa20_0(active4, 0L, active5, 0x1000L);
      case 78:
         if ((active4 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 306;
            jjmatchedPos = 19;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa20_0(active4, 0L, active5, 0x1000L);
      case 110:
         if ((active4 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 306;
            jjmatchedPos = 19;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 19);
}
private final int jjMoveStringLiteralDfa20_0(long old4, long active4, long old5, long active5)
{
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 19);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 19);
   }
   switch(curChar)
   {
      case 84:
         if ((active5 & 0x1000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 20;
         }
         break;
      case 116:
         if ((active5 & 0x1000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 20;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 20);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x420040000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfc3fffffffffffffL
};
static final long[] jjbitVec4 = {
   0xffffffL, 0xffffffffffff0000L, 0xf9ff01ffffffffffL, 0x1f00030003L
};
static final long[] jjbitVec5 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffd547f7fffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
};
static final long[] jjbitVec7 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec8 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0x7cffffffffffffffL, 0x60002f7fffL
};
static final long[] jjbitVec9 = {
   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec10 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
};
static final long[] jjbitVec11 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec13 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0xd7ffffffffffeL, 0x7fL, 0x200d6caefef02596L, 0x3000005fL
};
static final long[] jjbitVec15 = {
   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec16 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec17 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec18 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec19 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec20 = {
   0x0L, 0x8000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec21 = {
   0x1fbfd503f2ffc84L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec22 = {
   0x3e000000000020L, 0xfffffffffffffffeL, 0xfffffffe781fffffL, 0x77ffffffffffffffL
};
static final long[] jjbitVec23 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0x7fffL, 0x0L
};
static final long[] jjbitVec24 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec26 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec27 = {
   0x5f7ffdff80f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec28 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec29 = {
   0x0L, 0xffd7000000000000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec30 = {
   0x7fffffe00000000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
static final long[] jjbitVec31 = {
   0x7fffffe00000000L, 0xfffe03ff000007ffL, 0x7cffffffffffffffL, 0x3ff0060002f7fffL
};
static final long[] jjbitVec32 = {
   0x23ffffffffffffe0L, 0xffc3ff000000L, 0x3c5fdfffff99fe0L, 0x3ffc3b0000000L
};
static final long[] jjbitVec33 = {
   0x36dfdfffff987e0L, 0x1cffc05e000000L, 0x23edfdfffffbafe0L, 0xffc100000000L
};
static final long[] jjbitVec34 = {
   0x23cdfdfffff99fe0L, 0xffc3b0000000L, 0x3bfc718d63dc7e0L, 0xff8000000000L
};
static final long[] jjbitVec35 = {
   0x3effdfffffddfe0L, 0xffc300000000L, 0x3effdfffffddfe0L, 0xffc340000000L
};
static final long[] jjbitVec36 = {
   0x3fffdfffffddfe0L, 0xffc300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0xd7ffffffffffeL, 0x3ff007fL, 0x200d6caefef02596L, 0x33ff005fL
};
static final long[] jjbitVec38 = {
   0x3ff00000000L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec39 = {
   0x7fffffe03ff0000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
static final long[] jjbitVec40 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 137;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 427)
                        kind = 427;
                     jjCheckNAddStates(0, 7);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(135, 136);
                  else if (curChar == 39)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 420)
                     kind = 420;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 3:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  break;
               case 4:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 6:
                  if (curChar == 34 && kind > 426)
                     kind = 426;
                  break;
               case 7:
               case 8:
                  if (curChar == 39)
                     jjCheckNAddStates(8, 10);
                  break;
               case 9:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 11:
                  if (curChar == 39 && kind > 430)
                     kind = 430;
                  break;
               case 13:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 39 && kind > 431)
                     kind = 431;
                  break;
               case 17:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(14, 26);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 45)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 39)
                     jjAddStates(27, 30);
                  break;
               case 27:
                  if (curChar == 40)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 41 && kind > 433)
                     kind = 433;
                  break;
               case 33:
                  if (curChar == 40)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 41)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 90:
                  if (curChar == 32)
                     jjCheckNAdd(91);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 92:
                  if (curChar == 58)
                     jjCheckNAdd(93);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 94:
                  if (curChar == 58)
                     jjCheckNAdd(95);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 96:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(97, 24);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(97, 24);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 99:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(100, 24);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(100, 24);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 102:
                  if (curChar == 58)
                     jjCheckNAdd(103);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 104:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(105, 24);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(105, 24);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 107:
                  if (curChar == 58)
                     jjCheckNAdd(108);
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(55, 57);
                  break;
               case 109:
                  if (curChar == 58)
                     jjCheckNAdd(110);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(58, 60);
                  break;
               case 111:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(112, 24);
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(112, 24);
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 427)
                     kind = 427;
                  jjCheckNAddStates(0, 7);
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 427)
                     kind = 427;
                  jjCheckNAddTwoStates(122, 123);
                  break;
               case 123:
                  if (curChar != 46)
                     break;
                  if (kind > 427)
                     kind = 427;
                  jjCheckNAdd(124);
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 427)
                     kind = 427;
                  jjCheckNAdd(124);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 428)
                     kind = 428;
                  jjCheckNAdd(125);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(126, 127);
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 129:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(130, 131);
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(130, 131);
                  break;
               case 132:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(133);
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 432)
                     kind = 432;
                  jjCheckNAdd(133);
                  break;
               case 134:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(135, 136);
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 427)
                     kind = 427;
                  jjCheckNAdd(135);
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(136, 131);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 420)
                        kind = 420;
                     jjCheckNAdd(1);
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 420)
                     kind = 420;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  jjAddStates(11, 13);
                  break;
               case 10:
                  jjAddStates(8, 10);
                  break;
               case 12:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(67, 68);
                  break;
               case 16:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 25:
                  if (curChar == 121)
                     jjAddStates(69, 70);
                  break;
               case 26:
                  if (curChar != 114)
                     break;
                  if (kind > 433)
                     kind = 433;
                  jjCheckNAdd(27);
                  break;
               case 30:
                  if (curChar == 97)
                     jjCheckNAdd(26);
                  break;
               case 31:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 114)
                     jjCheckNAddTwoStates(33, 57);
                  break;
               case 36:
                  if (curChar == 111)
                     jjAddStates(71, 74);
                  break;
               case 37:
                  if (curChar == 114 && kind > 433)
                     kind = 433;
                  break;
               case 38:
                  if (curChar == 97)
                     jjCheckNAdd(37);
                  break;
               case 39:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 121 && kind > 433)
                     kind = 433;
                  break;
               case 42:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 117)
                     jjCheckNAdd(37);
                  break;
               case 45:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 109)
                     jjAddStates(75, 76);
                  break;
               case 48:
                  if (curChar == 104 && kind > 433)
                     kind = 433;
                  break;
               case 49:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 101 && kind > 433)
                     kind = 433;
                  break;
               case 53:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 58:
                  if (curChar == 97)
                     jjCheckNAdd(32);
                  break;
               case 59:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 100)
                     jjAddStates(77, 78);
                  break;
               case 61:
                  if (curChar != 121)
                     break;
                  if (kind > 433)
                     kind = 433;
                  jjCheckNAdd(27);
                  break;
               case 62:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 121)
                     jjCheckNAddTwoStates(33, 57);
                  break;
               case 64:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 104)
                     jjAddStates(79, 80);
                  break;
               case 66:
                  if (curChar == 117)
                     jjCheckNAdd(26);
                  break;
               case 67:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 117)
                     jjCheckNAdd(32);
                  break;
               case 69:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 109)
                     jjAddStates(81, 84);
                  break;
               case 71:
                  if (curChar != 104)
                     break;
                  if (kind > 433)
                     kind = 433;
                  jjCheckNAdd(27);
                  break;
               case 72:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar != 101)
                     break;
                  if (kind > 433)
                     kind = 433;
                  jjCheckNAdd(27);
                  break;
               case 76:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 104)
                     jjCheckNAddTwoStates(33, 57);
                  break;
               case 81:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 101)
                     jjCheckNAddTwoStates(33, 57);
                  break;
               case 85:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 114:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 115:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 127:
                  if ((0x288000002880L & l) != 0L && kind > 429)
                     kind = 429;
                  break;
               case 131:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(85, 86);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 420)
                     kind = 420;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 420)
                     kind = 420;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 13);
                  break;
               case 10:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(8, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 137 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   122, 123, 125, 126, 127, 128, 129, 131, 9, 10, 11, 4, 5, 6, 21, 22, 
   23, 89, 90, 98, 99, 101, 102, 106, 107, 24, 113, 25, 60, 65, 70, 89, 
   90, 24, 91, 92, 24, 93, 94, 24, 95, 96, 24, 98, 99, 24, 101, 102, 
   24, 103, 104, 24, 106, 107, 24, 108, 109, 24, 110, 111, 24, 23, 24, 113, 
   128, 129, 131, 14, 15, 31, 59, 40, 43, 46, 47, 51, 56, 62, 64, 67, 
   69, 74, 79, 83, 88, 132, 133, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec30[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec39[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      default : 
         if ((jjbitVec40[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\42", "\45", "\46", 
"\47", "\173", "\175", "\50", "\51", "\52", "\43", "\53", "\54", "\55", "\56", "\57", 
"\72", "\72\72", "\73", "\74", "\74\75", "\75", "\74\76", "\41\75", "\76", "\76\75", 
"\77", "\137", "\174", "\133", "\135", "\174\174", "\55\76", "\56\56\56", null, 
"\113", "\115", "\107", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fcffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[137];
private final int[] jjstateSet = new int[274];
protected char curChar;
public SQLParserTokenManager(CharStream stream){
   input_stream = stream;
}
public SQLParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 137; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      CommonTokenAction(matchedToken);
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
